{"Name":"Ping","Description":"","Script":"from SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import unix_now, convert_unixtime_to_datetime, output_handler\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED,EXECUTION_STATE_TIMEDOUT\nimport google.auth.transport.requests\nfrom google.oauth2 import service_account\nimport json\nimport requests\nfrom google.auth import impersonated_credentials\n\n@output_handler\ndef main():\n    siemplify = SiemplifyAction()\n\n    template_id = siemplify.extract_configuration_param('Integration',\"Template ID\")\n    region = siemplify.extract_configuration_param('Integration',\"Region\")\n    project_id = siemplify.extract_configuration_param('Integration',\"Project ID\")\n    workload_email = siemplify.extract_configuration_param('Integration',\"Workload Identity Email\", print_value=True)\n    sa_json = siemplify.extract_configuration_param('Integration',\"Service Account JSON\")\n    if sa_json is not None:\n        sa_json = json.loads(sa_json)\n    \n    # Default to trying to use the workload identity for auth\n    if workload_email is not None:\n        siemplify.LOGGER.info(\"Auth via Workload Identity E-mail\")\n        source_credentials, project = google.auth.default(\n            scopes=['https://www.googleapis.com/auth/cloud-platform']\n        )\n        credentials = impersonated_credentials.Credentials(\n            source_credentials=source_credentials,\n            target_principal=workload_email,\n            target_scopes=['https://www.googleapis.com/auth/cloud-platform'],\n            lifetime=300\n        )\n        request = google.auth.transport.requests.Request()\n        credentials.refresh(request)\n    else:\n        siemplify.LOGGER.info(\"Auth via Service Account JSON\")\n        credentials = service_account.Credentials.from_service_account_info(\n        sa_json, scopes=[\"https://www.googleapis.com/auth/cloud-platform\"]\n        )\n        request = google.auth.transport.requests.Request()\n        credentials.refresh(request)\n    hd = {\n        \"Authorization\": \"Bearer \" + credentials.token,\n        \"Content-Type\": \"application/json\"\n    }\n    URL = f\"https://modelarmor.{region}.rep.googleapis.com/v1/projects/{project_id}/locations/{region}/templates/{template_id}\"\n    req = requests.get(URL, headers=hd)\n    siemplify.LOGGER.info(req.text)\n\n    if template_id in req.text and \"PERMISSION_DENIED\" not in req.text:\n        status = EXECUTION_STATE_COMPLETED\n        output_message = \"OK\"\n        result_value = True \n    else:\n        output_message = f\"Unable to connect to Model Armor API\"\n        status = EXECUTION_STATE_FAILED\n        siemplify.LOGGER.error(output_message)\n        result_value = False\n\n\n    siemplify.end(output_message, result_value, status)\n\n\nif __name__ == \"__main__\":\n    main()\n","IntegrationIdentifier":"Unofficial GCP Model Armor","ScriptResultName":"ScriptResult","DynamicResultsMetadata":[{"ResultName":"JsonResult","ResultExample":"{}","ShowResult":true}],"Creator":"02b69956-c257-4c0f-ba6b-71db61d5dca2","IsEnabled":true,"IsCustom":true,"IsSystem":false,"Version":15.0,"TimeoutSeconds":600,"IsAsync":false,"AsyncPollingIntervalInSeconds":3600,"TotalIntervalTimeoutForAsyncInSeconds":86400,"Parameters":[],"DefaultResultValue":"","PythonVersion":"None","SimulationData":{"Entities":null},"SimulationDataJson":null}